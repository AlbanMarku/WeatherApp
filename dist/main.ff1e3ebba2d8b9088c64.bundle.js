(()=>{"use strict";var n={426:(n,e,t)=>{t.d(e,{Z:()=>i});var r=t(537),a=t.n(r),o=t(645),A=t.n(o)()(a());A.push([n.id,'*, *::after, *::before {\n    box-sizing: border-box;\n    margin: 0px;\n    padding: 0px;\n    font-family: \'Ubuntu\', sans-serif;\n}\n\nhtml {\n    height: 100vh;\n    background-color: darkgrey;\n}\n\nbody {\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n}\n\nheader {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100px;\n}\n\nmain {\n    height: 100%;\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-template-rows: 2fr 1fr;\n    grid-template-areas:\n    "weather temp"\n    "forecast forecast";\n}\n\n.weatherArea {\n    grid-area: weather;\n    display: flex;\n    justify-content: center;\n}\n\n.tempArea {\n    grid-area: temp;\n    display: flex;\n    justify-content: center;\n\n}\n\n.weatherBox {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    padding: 50px;\n    text-align: left;\n}\n\n.weatherStatus {\n    width: 500px;\n}\n\n.tempBox {\n    padding: 50px;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n}\n\n#googler {\n    border: none;\n    padding: 8px;\n    border-radius: 10px;\n    cursor: pointer;\n    width: 300px;\n}\n\n.weatherArea h1 {\n    font-size: 3rem;\n}\n\n.weatherBox img {\n    width: 100px;\n}\n\n.tempBox > div {\n    display: flex;\n    gap: 20px;\n    justify-content: flex-start;\n    align-items: center;\n    margin-bottom: 20px;\n}\n\n.tempBox p {\n    font-size: 1.5rem;\n    font-weight: bold;\n}\n\n.tempBox img {\n    width: 40px;\n}\n\n.forecastArea {\n    display: flex;\n    grid-area: forecast;\n    flex-direction: column;\n}\n\n.listArea {\n    flex: 6;\n}\n\n.buttonArea {\n    flex: 1;\n    display: flex;\n    justify-content: center;\n    align-self: center;\n    gap: 20px;\n    margin: 10px;\n}\n\n.buttonArea button {\n    padding: 0px 20px;\n    cursor: pointer;\n}\n\nul {\n    display: grid;\n    list-style-type: none;\n    grid-template-columns: repeat(7, 1fr);\n    height: 100%;\n}\n\nli:last-child {\n    border: none;\n}\n\nli {\n    display: flex;\n    flex-direction: column;\n    border-right: solid black;\n    justify-content: center;\n    align-items: center;\n}\n\nli img {\n    width: 100px;\n}\n\nfooter {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    padding: 20px;\n    height: 50px;\n}\n  \nfooter img {\n    width: 70px;\n}\n\nfooter img:hover {\n    animation: shake 0.5s;\n}\n\n@keyframes shake {\n    0% { transform: translate(1px, 1px) rotate(0deg); }\n    10% { transform: translate(-1px, -2px) rotate(-1deg); }\n    20% { transform: translate(-3px, 0px) rotate(1deg); }\n    30% { transform: translate(3px, 2px) rotate(0deg); }\n    40% { transform: translate(1px, -1px) rotate(1deg); }\n    50% { transform: translate(-1px, 2px) rotate(-1deg); }\n    60% { transform: translate(-3px, 1px) rotate(0deg); }\n    70% { transform: translate(3px, 1px) rotate(-1deg); }\n    80% { transform: translate(-1px, -1px) rotate(1deg); }\n    90% { transform: translate(1px, 2px) rotate(0deg); }\n    100% { transform: translate(1px, -2px) rotate(-1deg); }\n}',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,sBAAsB;IACtB,WAAW;IACX,YAAY;IACZ,iCAAiC;AACrC;;AAEA;IACI,aAAa;IACb,0BAA0B;AAC9B;;AAEA;IACI,YAAY;IACZ,aAAa;IACb,sBAAsB;AAC1B;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,aAAa;AACjB;;AAEA;IACI,YAAY;IACZ,aAAa;IACb,8BAA8B;IAC9B,2BAA2B;IAC3B;;uBAEmB;AACvB;;AAEA;IACI,kBAAkB;IAClB,aAAa;IACb,uBAAuB;AAC3B;;AAEA;IACI,eAAe;IACf,aAAa;IACb,uBAAuB;;AAE3B;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,uBAAuB;IACvB,aAAa;IACb,gBAAgB;AACpB;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,aAAa;IACb,aAAa;IACb,sBAAsB;IACtB,uBAAuB;AAC3B;;AAEA;IACI,YAAY;IACZ,YAAY;IACZ,mBAAmB;IACnB,eAAe;IACf,YAAY;AAChB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,aAAa;IACb,SAAS;IACT,2BAA2B;IAC3B,mBAAmB;IACnB,mBAAmB;AACvB;;AAEA;IACI,iBAAiB;IACjB,iBAAiB;AACrB;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,sBAAsB;AAC1B;;AAEA;IACI,OAAO;AACX;;AAEA;IACI,OAAO;IACP,aAAa;IACb,uBAAuB;IACvB,kBAAkB;IAClB,SAAS;IACT,YAAY;AAChB;;AAEA;IACI,iBAAiB;IACjB,eAAe;AACnB;;AAEA;IACI,aAAa;IACb,qBAAqB;IACrB,qCAAqC;IACrC,YAAY;AAChB;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,yBAAyB;IACzB,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,aAAa;IACb,YAAY;AAChB;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI,KAAK,2CAA2C,EAAE;IAClD,MAAM,8CAA8C,EAAE;IACtD,MAAM,4CAA4C,EAAE;IACpD,MAAM,2CAA2C,EAAE;IACnD,MAAM,4CAA4C,EAAE;IACpD,MAAM,6CAA6C,EAAE;IACrD,MAAM,4CAA4C,EAAE;IACpD,MAAM,4CAA4C,EAAE;IACpD,MAAM,6CAA6C,EAAE;IACrD,MAAM,2CAA2C,EAAE;IACnD,OAAO,6CAA6C,EAAE;AAC1D",sourcesContent:['*, *::after, *::before {\n    box-sizing: border-box;\n    margin: 0px;\n    padding: 0px;\n    font-family: \'Ubuntu\', sans-serif;\n}\n\nhtml {\n    height: 100vh;\n    background-color: darkgrey;\n}\n\nbody {\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n}\n\nheader {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100px;\n}\n\nmain {\n    height: 100%;\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-template-rows: 2fr 1fr;\n    grid-template-areas:\n    "weather temp"\n    "forecast forecast";\n}\n\n.weatherArea {\n    grid-area: weather;\n    display: flex;\n    justify-content: center;\n}\n\n.tempArea {\n    grid-area: temp;\n    display: flex;\n    justify-content: center;\n\n}\n\n.weatherBox {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    padding: 50px;\n    text-align: left;\n}\n\n.weatherStatus {\n    width: 500px;\n}\n\n.tempBox {\n    padding: 50px;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n}\n\n#googler {\n    border: none;\n    padding: 8px;\n    border-radius: 10px;\n    cursor: pointer;\n    width: 300px;\n}\n\n.weatherArea h1 {\n    font-size: 3rem;\n}\n\n.weatherBox img {\n    width: 100px;\n}\n\n.tempBox > div {\n    display: flex;\n    gap: 20px;\n    justify-content: flex-start;\n    align-items: center;\n    margin-bottom: 20px;\n}\n\n.tempBox p {\n    font-size: 1.5rem;\n    font-weight: bold;\n}\n\n.tempBox img {\n    width: 40px;\n}\n\n.forecastArea {\n    display: flex;\n    grid-area: forecast;\n    flex-direction: column;\n}\n\n.listArea {\n    flex: 6;\n}\n\n.buttonArea {\n    flex: 1;\n    display: flex;\n    justify-content: center;\n    align-self: center;\n    gap: 20px;\n    margin: 10px;\n}\n\n.buttonArea button {\n    padding: 0px 20px;\n    cursor: pointer;\n}\n\nul {\n    display: grid;\n    list-style-type: none;\n    grid-template-columns: repeat(7, 1fr);\n    height: 100%;\n}\n\nli:last-child {\n    border: none;\n}\n\nli {\n    display: flex;\n    flex-direction: column;\n    border-right: solid black;\n    justify-content: center;\n    align-items: center;\n}\n\nli img {\n    width: 100px;\n}\n\nfooter {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    padding: 20px;\n    height: 50px;\n}\n  \nfooter img {\n    width: 70px;\n}\n\nfooter img:hover {\n    animation: shake 0.5s;\n}\n\n@keyframes shake {\n    0% { transform: translate(1px, 1px) rotate(0deg); }\n    10% { transform: translate(-1px, -2px) rotate(-1deg); }\n    20% { transform: translate(-3px, 0px) rotate(1deg); }\n    30% { transform: translate(3px, 2px) rotate(0deg); }\n    40% { transform: translate(1px, -1px) rotate(1deg); }\n    50% { transform: translate(-1px, 2px) rotate(-1deg); }\n    60% { transform: translate(-3px, 1px) rotate(0deg); }\n    70% { transform: translate(3px, 1px) rotate(-1deg); }\n    80% { transform: translate(-1px, -1px) rotate(1deg); }\n    90% { transform: translate(1px, 2px) rotate(0deg); }\n    100% { transform: translate(1px, -2px) rotate(-1deg); }\n}'],sourceRoot:""}]);const i=A},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,a,o){"string"==typeof n&&(n=[[null,n,void 0]]);var A={};if(r)for(var i=0;i<this.length;i++){var s=this[i][0];null!=s&&(A[s]=!0)}for(var c=0;c<n.length;c++){var l=[].concat(n[c]);r&&A[l[0]]||(void 0!==o&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=o),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),a&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=a):l[4]="".concat(a)),e.push(l))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */"),A=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(A).concat([o]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var o={},A=[],i=0;i<n.length;i++){var s=n[i],c=r.base?s[0]+r.base:s[0],l=o[c]||0,p="".concat(c," ").concat(l);o[c]=l+1;var d=t(p),u={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==d)e[d].references++,e[d].updater(u);else{var m=a(u,r);r.byIndex=i,e.splice(i,0,{identifier:p,updater:m,references:1})}A.push(p)}return A}function a(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,a){var o=r(n=n||[],a=a||{});return function(n){n=n||[];for(var A=0;A<o.length;A++){var i=t(o[A]);e[i].references--}for(var s=r(n,a),c=0;c<o.length;c++){var l=t(o[c]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}o=s}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var a=void 0!==t.layer;a&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,a&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var o=t.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(r){var a=e[r];if(void 0!==a)return a.exports;var o=e[r]={id:r,exports:{}};return n[r](o,o.exports,t),o.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n;t.g.importScripts&&(n=t.g.location+"");var e=t.g.document;if(!n&&e&&(e.currentScript&&(n=e.currentScript.src),!n)){var r=e.getElementsByTagName("script");r.length&&(n=r[r.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=n})(),t.nc=void 0;var r={};(()=>{t.d(r,{Z:()=>I});var n=t(379),e=t.n(n),a=t(795),o=t.n(a),A=t(569),i=t.n(A),s=t(565),c=t.n(s),l=t(216),p=t.n(l),d=t(589),u=t.n(d),m=t(426),f={};f.styleTagTransform=u(),f.setAttributes=c(),f.insert=i().bind(null,"head"),f.domAPI=o(),f.insertStyleElement=p(),e()(m.Z,f),m.Z&&m.Z.locals&&m.Z.locals;const g=(()=>{function n(n){let e=[];for(let t=0;t<n.list.length;t++)e.push(n.list[t]);return e}return{getData:async function e(t){try{const e=`https://api.openweathermap.org/data/2.5/forecast?q=${t}&id=524901&appid=9bee3cb739586729ce79627217fb845a&units=metric`,a=await fetch(e,{mode:"cors"});if(!a.ok)throw new Error(`City ${t} not found`);const o=await a.json();return{todayForecast:(r=o,{cityName:r.city.name,countryName:r.city.country,temp:r.list[0].main.temp,tempMin:r.list[0].main.temp_min,tempMax:r.list[0].main.temp_max,feelsLike:r.list[0].main.feels_like,weatherStatus:r.list[0].weather[0].description,humidity:r.list[0].main.humidity,wind:r.list[0].wind.speed,icon:r.list[0].weather[0].icon,time:r.list[0].dt_txt}),allForecast:n(o)}}catch(n){return alert("where it at"),e("London")}var r}}})(),C=t.p+"humid.svg",x=t.p+"wind.svg",h=t.p+"feelsLike.svg",y=(()=>{function n(n){n.target.value=""}function e(n){let e=0,t=7;const a=document.querySelector(".listArea");document.getElementById("next").addEventListener("click",(()=>{console.log("hit"),t<n.length&&(e+=7,t+=7,t+7>n.length&&(t=n.length,e=t-7),r(e,t,n).then((n=>{a.innerHTML="",a.appendChild(n)})))})),document.getElementById("prev").addEventListener("click",(()=>{e>0&&(e-=7,t-=7,e-7<0&&(t=7,e=0),r(e,t,n).then((n=>{a.innerHTML="",a.appendChild(n)})))}))}function t(){}async function r(n,e,t){const r=document.createElement("ul");r.innerHTML="";const a=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"];for(let o=n;o<e;o++){const n=document.createElement("li");n.classList.add("item");const e=document.createElement("p"),A=document.createElement("p");e.textContent=t[o].main.temp+" °C";const i=new Date(t[o].dt_txt);A.textContent=a[i.getDay()];const s=document.createElement("img");try{const a=`http://openweathermap.org/img/wn/${t[o].weather[0].icon}@2x.png`,i=await fetch(a,{mode:"cors"});if(!i.ok)throw new Error("image not found");s.src=i.url,r.appendChild(n),n.appendChild(A),n.appendChild(e),n.appendChild(s)}catch(n){alert(n)}}return r}return{pageContent:async function(a){try{const o=`http://openweathermap.org/img/wn/${a.todayForecast.icon}@2x.png`,A=await fetch(o,{mode:"cors"});if(!A.ok)throw new Error("image not found");!function(e,t){let r=document.querySelector(".imger"),a=document.querySelector(".weatherStatus"),o=document.querySelector(".cityName"),A=document.querySelector(".countryName"),i=document.querySelector(".dateName");const s=document.querySelector("#googler"),c=new google.maps.places.SearchBox(s);c.addListener("places_changed",(()=>{const n=c.getPlaces()[0];if(null==n)return;const e=n.address_components[0].long_name;I.searchInput(e)})),s.addEventListener("click",n),s.placeholder="Enter place name",a.textContent=e.weatherStatus,o.textContent=e.cityName,A.textContent=e.countryName,i.textContent=e.time,r.src=t}(a.todayForecast,A.url),function(n){let e=document.querySelector(".feel"),t=document.querySelector(".humid"),r=document.querySelector(".wind"),a=document.querySelector(".humidImg"),o=document.querySelector(".windImg"),A=document.querySelector(".feelImg");a.src=C,t.textContent="Humidity "+n.humidity+" °C",o.src=x,r.textContent="Wind "+n.wind+" °C",A.src=h,e.textContent="Feels like "+n.feelsLike+" °C"}(a.todayForecast),function(n){const a=document.querySelector(".listArea");r(0,7,n).then((n=>{a.innerHTML="",a.appendChild(n)})),e(n),e=t}(a.allForecast)}catch(n){alert(n),console.log("no image"+n)}}}})(),B=t.p+"logo.png",I=(document.addEventListener("DOMContentLoaded",(()=>{document.querySelector(".floating").src=B,g.getData("london").then((n=>{y.pageContent(n)}))})),{searchInput:function(n){g.getData(n).then((n=>{y.pageContent(n)}))}})})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,