(()=>{"use strict";var e={426:(e,n,t)=>{t.d(n,{Z:()=>c});var r=t(537),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([e.id,'*, *::after, *::before {\n    box-sizing: border-box;\n    margin: 0px;\n    padding: 0px;\n    font-family: \'Ubuntu\', sans-serif;\n}\n\nhtml {\n    height: 100vh;\n    background-color: darkgrey;\n}\n\nbody {\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n}\n\nheader {\n    border: solid orange;\n    height: 100px;\n}\n\nmain {\n    border: solid red;\n    height: 100%;\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-template-rows: 2fr 1fr;\n    grid-template-areas:\n    "weather temp"\n    "forecast forecast";\n}\n\n.weatherArea {\n    border: solid blue;\n    grid-area: weather;\n    display: flex;\n    align-items: flex-start;\n\n}\n\n.weatherBox {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    border: solid black;\n    padding: 50px;\n    text-align: left;\n}\n\n.weatherArea h1 {\n    font-size: 3rem;\n}\n\n.weatherBox img {\n    width: 100px;\n}\n\n.tempArea {\n    border: solid purple;\n    grid-area: temp;\n}\n\n.tempBox {\n    border: solid green;\n}\n\n.forecastArea {\n    display: flex;\n    border: solid black;\n    grid-area: forecast;\n    background-color: yellow;\n    flex-direction: column;\n}\n\n.listArea {\n    background-color: green;\n    flex: 3;\n}\n\n.buttonArea {\n    background-color: pink;\n    flex: 1;\n}\n\n.list {\n    display: grid;\n    list-style-type: none;\n    grid-template-columns: repeat(7, 1fr);\n    background-color: blueviolet;\n    height: 100%;\n}\n\nli {\n    border: solid black;\n}\n\nfooter {\n    border: solid green;\n    height: 50px;\n}',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,sBAAsB;IACtB,WAAW;IACX,YAAY;IACZ,iCAAiC;AACrC;;AAEA;IACI,aAAa;IACb,0BAA0B;AAC9B;;AAEA;IACI,YAAY;IACZ,aAAa;IACb,sBAAsB;AAC1B;;AAEA;IACI,oBAAoB;IACpB,aAAa;AACjB;;AAEA;IACI,iBAAiB;IACjB,YAAY;IACZ,aAAa;IACb,8BAA8B;IAC9B,2BAA2B;IAC3B;;uBAEmB;AACvB;;AAEA;IACI,kBAAkB;IAClB,kBAAkB;IAClB,aAAa;IACb,uBAAuB;;AAE3B;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,uBAAuB;IACvB,mBAAmB;IACnB,aAAa;IACb,gBAAgB;AACpB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,oBAAoB;IACpB,eAAe;AACnB;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,mBAAmB;IACnB,wBAAwB;IACxB,sBAAsB;AAC1B;;AAEA;IACI,uBAAuB;IACvB,OAAO;AACX;;AAEA;IACI,sBAAsB;IACtB,OAAO;AACX;;AAEA;IACI,aAAa;IACb,qBAAqB;IACrB,qCAAqC;IACrC,4BAA4B;IAC5B,YAAY;AAChB;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,mBAAmB;IACnB,YAAY;AAChB",sourcesContent:['*, *::after, *::before {\n    box-sizing: border-box;\n    margin: 0px;\n    padding: 0px;\n    font-family: \'Ubuntu\', sans-serif;\n}\n\nhtml {\n    height: 100vh;\n    background-color: darkgrey;\n}\n\nbody {\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n}\n\nheader {\n    border: solid orange;\n    height: 100px;\n}\n\nmain {\n    border: solid red;\n    height: 100%;\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-template-rows: 2fr 1fr;\n    grid-template-areas:\n    "weather temp"\n    "forecast forecast";\n}\n\n.weatherArea {\n    border: solid blue;\n    grid-area: weather;\n    display: flex;\n    align-items: flex-start;\n\n}\n\n.weatherBox {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    border: solid black;\n    padding: 50px;\n    text-align: left;\n}\n\n.weatherArea h1 {\n    font-size: 3rem;\n}\n\n.weatherBox img {\n    width: 100px;\n}\n\n.tempArea {\n    border: solid purple;\n    grid-area: temp;\n}\n\n.tempBox {\n    border: solid green;\n}\n\n.forecastArea {\n    display: flex;\n    border: solid black;\n    grid-area: forecast;\n    background-color: yellow;\n    flex-direction: column;\n}\n\n.listArea {\n    background-color: green;\n    flex: 3;\n}\n\n.buttonArea {\n    background-color: pink;\n    flex: 1;\n}\n\n.list {\n    display: grid;\n    list-style-type: none;\n    grid-template-columns: repeat(7, 1fr);\n    background-color: blueviolet;\n    height: 100%;\n}\n\nli {\n    border: solid black;\n}\n\nfooter {\n    border: solid green;\n    height: 50px;\n}'],sourceRoot:""}]);const c=i},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(i[s]=!0)}for(var l=0;l<e.length;l++){var A=[].concat(e[l]);r&&i[A[0]]||(void 0!==a&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=a),t&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=t):A[2]=t),o&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=o):A[4]="".concat(o)),n.push(A))}},n}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */"),i=t.sources.map((function(e){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(e," */")}));return[n].concat(i).concat([a]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var a={},i=[],c=0;c<e.length;c++){var s=e[c],l=r.base?s[0]+r.base:s[0],A=a[l]||0,d="".concat(l," ").concat(A);a[l]=A+1;var u=t(d),p={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==u)n[u].references++,n[u].updater(p);else{var m=o(p,r);r.byIndex=c,n.splice(c,0,{identifier:d,updater:m,references:1})}i.push(d)}return i}function o(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var c=t(a[i]);n[c].references--}for(var s=r(e,o),l=0;l<a.length;l++){var A=t(a[l]);0===n[A].references&&(n[A].updater(),n.splice(A,1))}a=s}}},569:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(r){var o=n[r];if(void 0!==o)return o.exports;var a=n[r]={id:r,exports:{}};return e[r](a,a.exports,t),a.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.nc=void 0;var r={};(()=>{t.d(r,{Z:()=>C});var e=t(379),n=t.n(e),o=t(795),a=t.n(o),i=t(569),c=t.n(i),s=t(565),l=t.n(s),A=t(216),d=t.n(A),u=t(589),p=t.n(u),m=t(426),f={};f.styleTagTransform=p(),f.setAttributes=l(),f.insert=c().bind(null,"head"),f.domAPI=a(),f.insertStyleElement=d(),n()(m.Z,f),m.Z&&m.Z.locals&&m.Z.locals;const h=(()=>{function e(e){let n=[];for(let t=0;t<e.list.length;t++)n.push(e.list[t]);return n}return{getData:async function n(t){try{const n=`https://api.openweathermap.org/data/2.5/forecast?q=${t}&id=524901&appid=9bee3cb739586729ce79627217fb845a&units=metric`,o=await fetch(n,{mode:"cors"});if(!o.ok)throw new Error(`City ${t} not found`);const a=await o.json();return{todayForecast:(r=a,{cityName:r.city.name,countryName:r.city.country,temp:r.list[0].main.temp,tempMin:r.list[0].main.temp_min,tempMax:r.list[0].main.temp_max,feelsLike:r.list[0].main.feels_like,weatherStatus:r.list[0].weather[0].description,humidity:r.list[0].main.humidity,wind:r.list[0].wind.speed,icon:r.list[0].weather[0].icon,time:r.list[0].dt_txt}),allForecast:e(a)}}catch(e){return alert("where it at"),n("London")}var r}}})(),g=(()=>{async function e(e,n,t){const r=document.querySelector(".list");r.innerHTML="";for(let o=e;o<n;o++){const e=document.createElement("li");e.classList.add("item");const n=document.createElement("p");n.textContent=t[o].main.temp+" temp";const a=document.createElement("img");try{const i=`http://openweathermap.org/img/wn/${t[o].weather[0].icon}@2x.png`,c=await fetch(i,{mode:"cors"});if(console.log(c),!c.ok)throw new Error("image not found");a.src=c.url,r.appendChild(e),e.appendChild(n),e.appendChild(a)}catch(e){alert(e)}}}return{pageContent:async function(n){try{const t=`http://openweathermap.org/img/wn/${n.todayForecast.icon}@2x.png`,r=await fetch(t,{mode:"cors"});if(!r.ok)throw new Error("image not found");!function(e,n){let t=document.querySelector(".imger"),r=document.querySelector(".weatherStatus"),o=document.querySelector(".cityName"),a=document.querySelector(".countryName"),i=document.querySelector(".dateName");const c=document.querySelector("#googler"),s=new google.maps.places.SearchBox(c);s.addListener("places_changed",(()=>{const e=s.getPlaces()[0];if(null==e)return;const n=e.address_components[0].long_name;C.searchInput(n)})),c.addEventListener("click",(()=>{c.value=""})),c.placeholder="Enter place name",r.textContent=e.weatherStatus,o.textContent=e.cityName,a.textContent=e.countryName,i.textContent=e.time,t.src=n}(n.todayForecast,r.url),function(e){let n=document.querySelector(".feelTemp"),t=document.querySelector(".humid"),r=document.querySelector(".speed");n.textContent=e.feelsLike,t.textContent=e.humidity,r.textContent=e.wind}(n.todayForecast),function(n){let t=0,r=7;e(t,r,n),document.getElementById("next").addEventListener("click",(()=>{r<n.length&&(t+=7,r+=7,r+7>n.length&&(r=n.length,t=r-7),e(t,r,n))})),document.getElementById("prev").addEventListener("click",(()=>{t>0&&(t-=7,r-=7,t-7<0&&(r=7,t=0),e(t,r,n))}))}(n.allForecast)}catch(e){alert(e),console.log("no image"+e)}}}})(),C=(document.addEventListener("DOMContentLoaded",(()=>{h.getData("london").then((e=>{g.pageContent(e)}))})),{searchInput:function(e){h.getData(e).then((e=>{g.pageContent(e)}))}})})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,